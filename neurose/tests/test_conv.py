from unittest import TestCase
import numpy as np
from random import randint
from neurose.layers.conv import Conv2D
from neurose.net import Net
import torch
import torch.nn as nn

class TestConvLayer(TestCase):

    def test_convolution_output_with_one_kernel(self):
        torch.random.manual_seed(42)
        in_channels = 2
        batch_size = 3
        kernel_size = 2
        kernel_amount = 1
        inp = np.arange(24).reshape(batch_size, in_channels, 2, 2)
        torch_layer = nn.Conv2d(in_channels=in_channels, out_channels=kernel_amount, kernel_size=kernel_size, bias=False)
        torch_output = torch_layer(torch.tensor(inp).float())
        kernel = list(torch_layer.parameters())[0].detach().numpy()
        # create using kernel generated by pytorch
        neurose_layer = Conv2D(Net(None), input_channels=in_channels, kernel_amount=kernel_amount, kernel_size=kernel_size, initial_weights=kernel)
        my_output = neurose_layer.forward_pass(inp)
        self.assertTrue(np.allclose(my_output, torch_output.detach().numpy()))

    def test_convolution_output_with_one_kernel_more_channels(self):
        torch.random.manual_seed(42)
        in_channels = 3
        batch_size = 3
        kernel_size = 2
        kernel_amount = 1
        inp = np.arange(36).reshape(batch_size, in_channels, 2, 2)
        torch_layer = nn.Conv2d(in_channels=in_channels, out_channels=kernel_amount, kernel_size=kernel_size, bias=False)
        torch_output = torch_layer(torch.tensor(inp).float())
        kernel = list(torch_layer.parameters())[0].detach().numpy()
        # create using kernel generated by pytorch
        neurose_layer = Conv2D(Net(None), input_channels=in_channels, kernel_amount=kernel_amount, kernel_size=kernel_size, initial_weights=kernel)
        my_output = neurose_layer.forward_pass(inp)
        self.assertTrue(np.allclose(my_output, torch_output.detach().numpy()))

    
    def test_convolution_output_with_several_kernels(self):
        torch.random.manual_seed(42)
        inp = np.arange(16).reshape(1, 1, 4, 4)
        torch_layer = nn.Conv2d(in_channels=1, out_channels=2, kernel_size=2, bias=False)
        torch_output = torch_layer(torch.tensor(inp).float())
        kernel = list(torch_layer.parameters())[0].detach().numpy()
        # create using kernel generated by pytorch
        neurose_layer = Conv2D(Net(None), input_channels=1, kernel_amount=2, kernel_size=2, initial_weights=kernel)
        my_output = neurose_layer.forward_pass(inp)
        self.assertTrue(np.allclose(my_output, torch_output.detach().numpy()))
    
    
    
    def test_convolution_output_with_several_kernels_and_input_channels(self):
        torch.random.manual_seed(42)
        inp = np.arange(96).reshape(3, 2, 4, 4)
        torch_layer = nn.Conv2d(in_channels=2, out_channels=2, kernel_size=2, bias=False)
        torch_output = torch_layer(torch.tensor(inp).float())
        kernel = list(torch_layer.parameters())[0].detach().numpy()
        # create using kernel generated by pytorch
        neurose_layer = Conv2D(Net(None), input_channels=1, kernel_amount=2, kernel_size=2, initial_weights=kernel)
        my_output = neurose_layer.forward_pass(inp)
        self.assertTrue(np.allclose(my_output, torch_output.detach().numpy()))

    
    def test_convolution_output_with_biases(self):
        torch.random.manual_seed(42)
        inp = np.arange(96).reshape(3, 2, 4, 4)
        torch_layer = nn.Conv2d(in_channels=2, out_channels=2, kernel_size=2)
        torch_output = torch_layer(torch.tensor(inp).float())
        kernel, biases = list(torch_layer.parameters())
        # create using kernel generated by pytorch
        neurose_layer = Conv2D(Net(None), 
                                input_channels=1, 
                                kernel_amount=2, 
                                kernel_size=2, 
                                use_biases=True, 
                                initial_weights=kernel.detach().numpy(), 
                                initial_biases=biases.detach().numpy())
        my_output = neurose_layer.forward_pass(inp)
        self.assertTrue(np.allclose(my_output, torch_output.detach().numpy()))

    
    def test_convolution_output_with_padding(self):
        torch.random.manual_seed(42)
        inp = np.arange(96).reshape(3, 2, 4, 4)
        torch_layer = nn.Conv2d(in_channels=2, out_channels=2, kernel_size=2, padding=2)
        torch_output = torch_layer(torch.tensor(inp).float())
        kernel, biases = list(torch_layer.parameters())
        # create using kernel generated by pytorch
        neurose_layer = Conv2D(Net(None), 
                                input_channels=1, 
                                kernel_amount=2, 
                                kernel_size=2, 
                                use_biases=True, 
                                initial_weights=kernel.detach().numpy(), 
                                initial_biases=biases.detach().numpy(),
                                padding=2)
        my_output = neurose_layer.forward_pass(inp)
        self.assertTrue(np.allclose(my_output, torch_output.detach().numpy()))
    