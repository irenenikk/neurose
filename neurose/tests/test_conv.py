from unittest import TestCase
import numpy as np
from random import randint
from neurose.layers.conv import Conv2D
from neurose.net import Net
import torch
import torch.nn as nn

class TestConvLayer(TestCase):

    def test_convolution_output_with_one_kernel(self):
        torch.random.manual_seed(42)
        inp = np.arange(16).reshape(1, 4, 4)
        torch_layer = nn.Conv2d(in_channels=1, out_channels=1, kernel_size=2, bias=False)
        torch_output = torch_layer(torch.tensor(inp).unsqueeze(0).float())
        kernel = list(torch_layer.parameters())[0][0].detach().numpy()
        # create using kernel generated by pytorch
        neurose_layer = Conv2D(Net(None), input_channels=1, kernel_amount=1, kernel_size=2, initial_weights=kernel)
        my_output = neurose_layer.forward_pass(inp)
        print(np.round(my_output, 2))
        print(np.round(torch_output.detach().numpy()[0], 2))
        self.assertTrue(np.allclose(my_output, torch_output.detach().numpy()[0]))

